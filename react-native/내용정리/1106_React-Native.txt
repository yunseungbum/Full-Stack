useEffect 첫번째 인자로 비동기 함수가 들어오면 안되는 이유

첫번째 인자는 클린업 함수 또는 undefined를 반환해야 하기 때문이다.

만약 useEffect안에서 비동기함수를 사용하고 싶다면 함수 내부에서 비동기함수를 선언하고 호출하는 방식으로 사용하자.

--------------------------------------------------------------------------------------------------------------------

스크롤 위치를 추적하는 커스텀 훅
useScrollPosition
-사용자가 스크롤을 할 때마다 스크롤 위치를 상태로 반환해서 이를 통해 특정 위치에 도달했을때 색을 바꾸는 동작 만들기

Provider
- Provider컴포넌트는 value를 받아서 모든 하위 컴포넌트에 전달하고, 
  하위 컴포넌트는 provider컴포넌트의 value가 변경될 때마다 다시 렌더링된다.
- Provider는 가장 가깝게 선언된 것으로부터 실행이 된다.

1.사용자 설정 테마 관리
- 사용자가 앱 내에서 다크 모드와 라이트 모드를 선택할 수 있게 만들기
-ThemeContext를 이용해서 테마 상태를 전역으로 관리하고, 앱 전체에 테마가 반영되도록 한다.

ThemeContext.js

ThemedConponent
-화면의 배경이 어둠 - 밝음 으로 할 수 있도록 하기
-화면 가운데 텍스트도 'Dark Mode',Light Mode
-버튼을 누르면 다크모드와 라이트모드로 바뀌도록 설정
dark :#333  light: #fff
-StyleSheet 사용


2. 장바구니 관리

useReducer()
현재 상태와, 상태를 어떻게 업데이트할지를 정의한 함수를 통해 새로운 상태를 반환

주요 개념
state: 현재 컴포넌트의 상태값
action: 상태를 어떻게 변경할지 나타내는 "명령"
reducer : 현재 상태와 액션을 받아서 새로운 상태를 반환하는 함수

기본문법

const initialState = {count:0}

const[state,dispatch] = useReducer(reducer,initialState);

function  reducer(state,action){
	switch(action.type){
		case 'INCREMENT':
		return{count: state.count +1};

		case'DECREMENT':
		return{count: state.count -1};
	}
	}

<Button onClick = { () => dispatch({type : "INCREMENT"})}>
<Button onClick = { () => dispatch({type : "DECREMENT"})}>

언제 useReducer를 사용할까?
1. 상태가 여러개일 때 : useState를 사용해 각각의 상태를 관리하기보다는 하나의 state 객체로 묶어서
 관리하는 것이 효율적이기 때문이다.

2. 복잡한 로직이 필요할 때 : 상태 변경에 따라 다양한 조건을 검토하고 여러 단계를 거쳐서 상태를 변경해야 할 때

3. 상태 업데이트 로직을 컴포넌트 밖으로 분리하고 싶을 때 reducer함수는 컴포넌ㄴ트 외부에서 둘 수도 있어서
   상태 관리 로직을 명확하게 분리 할 수 있다.


<FlatList/>
데이터의 목록을 빠르고 간편하게 렌더링 하기 위한 컴포넌트
일반적으로 배열의 형태의 데이터를 받아서 각 항목을 화면에 표시

data: 리스트에 표시할 데이터 배열
renderItem: 각 아이템을 어떻게 렌더링 할지 정의할 함수


3. 사용자 로그인 상태 관리

UserContext로 로그인 상태를 관리

HomeScreen.js에서 로그인 되어 있으면 
Welcome,홍길동님
로그아웃 버튼

로그아웃 상태면 로그인버튼


































































