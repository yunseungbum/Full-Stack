TreeSet
-이진탐색트리 중에서도 성능을 향상시킨 레드블랙트리로 구현되어있다.
-레드블랙트리는 부모노드보다 작은 값을 가지는 노드는 왼쪽으로 큰 값을 가지는 노드는 오른쪽 사직으로 배치하여
 데이터의 추가나 삭제 시 트리가 한쪽으로 치우쳐지지 않도록 균형을 맞춘다.



Map
-Map은 List,Set과 달리 Map 인터페이스가 별도로 존대하며, 데이터를 List계열의 컬렉션과 다르게 처리한다.
-Map인터페이스는 데이터를 Key(키)와 Value(값)로 구분하여 저장하는 방식(Key-value 방식)을 사용한다.
-색깔별 열쇠, 자물쇠 비유로 설명
-map구조는 key를 통해서 값을 검색해 내므로 많은 양의 데이터를 조회하는데 있어서 매우 뛰어난 성능을 발휘



HashMap
-map을 구현하고 있는 자식 클래스에서 가장 많이 사용하는게 hash map이다.


람다식
-JDK1.8부터 함수형 프로그래밍 '람다식(Lambda expression)'을 지원하고 있다.
-람다식은 이름이 없는 익명 함수(anonymous function)를 만들기 위한 표현식을 말한다.
-자바는 객체를 기반으로 프로그램을 구현하는 객체 지향 프로그램이다.
-따라서 클래스를 먼저 생성하고, 클래스 안에 메서드와 객체를 만들어 사용해야 한다.
-하지만 함수형 프로그래밍은 객체 지향 프로그램과 달리 함수만을 구현하고 실행할 수 있는 개발방식이다



람다식이 도입된 이유
-함수형 프로그래밍 방식
-자바에서는 함수형 프로그래밍 방식이 적용되지 않았다.
-자바 공부할 때 함수는 어디에 만들었는가 클래스를 나누어서 작성했었다.
-자바 -> 함수가 독립적이지 않다. -> 반드시 객체를 만들어서 호출


람다식 문법
-람다식 문법은 기존의 자바 문법과는 달라서 객체 지향 프로그래밍에 익숙한 개발자들은 다소 생소할 수 있다.
-하지만 문법이 매우 간결해지고, 원하는 결과를 쉽게 집계할 수 있어 익숙해지면 큰 장점이 있다.

	int add(int x, int y){
	return x+y;
	}

	위 함수를 람다식으로 표현하기

 	(int x,int y) -> {return x + y;}
	매개변수함수 구현

- 메서드의 이름과 반환형을 제거하고 화살표를 이용해 구현한다.


소괄호 생략하기
-람다식 문법에서는 파라미터의 자료형을 생략할 수 있다.
(x,y) -> { return x + y;}
-파라미터가 한 개인 경우에는 소괄호도 생략할 수 있다.
(String str) -> { System.out.println(str);}

(str) -> { System.out.println(str);}

str -> { System.out.println(str);}

-그러나 파라미터가 두 개 이상일 경우에는 생략할 수 없다.



중괄호 생략하기
-함수의 반환형이 void라면 중괄호도 생략할 수 있다.
(x,y)-> x+y;



함수형 인터페이스
-객체 지향 프로그램에서 인터페이스를 사용하려면 인터페이스를 클래스에서 구현한뒤 사용해야 한다.
-람다식은 위와 같은 과정을 생략할 수 있다.
-단, 람다식을 이용해 인터페이스를 사용할 경우, 인터페이스는 하나의 기능만을 정의할 수 있다.
-람다식을 구현하기 위해서는 먼저 인터페이스를 만들고, 인터페이스에 람다식으로 구현할 메서드를 선언해야 한다.
-오직 하나의 추상 메서드가 선언된 인터페이스만이 람다식의 타겟 타입이 될 수 있는데
-이러한 인터페이스를 '함수형 인터페이스'라고 한다.
































































