Controller에서 사용되는 어노테이션

@Comoponent -> 스프링부트가 컴포넌트 스캐닝을 할 때 해당 어노테이션이 달린 클래스들을 전부 bean으로 만든다.

@Component 어노테이션의 자식 어노테이션
ㄴ @Controller -> 컨트롤러임을 나타내는 어노테이션
ㄴ @Service -> 서비스임을 나타내는 어노테이션
ㄴ @Repository -> 리파지토리임을 나타내는 어노테이션

@RestController -> @Controller + @ResponseBody
ㄴ 해당 컨트롤러의 모든 메서드에 @ResponseBody가 적용된다.

원래 컨트롤러는 반환으로 화면이름을 보낸다.
우리는 화면을 이미 리액트로 보여주고 있다.
@ResponseBody를 통해 응답 바디에 데이터를 보낸다.

@GetMapping
@PostMapping
@PutMapping
@DeleteMapping

각각의 요청메서드로 요청이 올 때 메서드를 실행을 해준다.

@PathVariable
요청을 할 때 주소에 들어있는 값을 매개변수로 받을 때 사용
localhost:9090/product/1
@GetMapping("/{id}")
public String f(@PathVariable int id)

@RequestParam
요청을 할 때 주소에 들어있는 값을 매개변수로 받을 때 사용
localhost:9090/product?id=1 ->   ?id=1 (쿼리파라미터)
public String f(@requestParam("id") int id)

lombok
@Getter,@Setter
클래스에 들어있는 필드에 대해 getter,setter메서드를 만들어주는 어노테이션
@NoArgsConstructor
기본생성자를 생성해주는 어노테이션 
@AllArgsConstructor
모든 필드를 매개변수로 갖는 생성자를 만드는 어노테이션
@RequiredArgsConstructor
final 또는 @NonNull 어노테이션이 붙은 필드만 매개변수로 갖는 생성자를 생성
@Data
ㄴ@Getter
ㄴ@Setter
ㄴ@ToString -> 오버라이딩한 toString()메서드를 작성
@Builder -> builder 패턴으로 객체를 생성할 수 있게 해주는 어노테이션

JPA에서 사용하는 어노테이션
@Entity -> 해당 클래스가 JPA의 엔티티임을 명시
@Id -> 해당 필드가 테이블의 기본키(Primary Key)임을 명시
@GeneratedValue -> 기본값을 자동으로 생성하도록 설정
@Table -> 엔티티와 매핑될 테이블 이름을 지정. 테이블 이름이 엔티티와 다를 때 사용
