의존선 주입을 할 수 있는 세가지 방법

1.필드주입
@Autowired를 붙힌다.
순환참조시 오류가 발생하지 않기 때문에 stackOverflow가 일어날 수 있다.

순환참조:Bean간의 참조 관계가 순환되어 발생하는 상황
A클래스가 B클래스의 빈을 주입받고,B클래스가 A클래스의 빈을 주입받는 상황

2.생성자 주입

class Person{
	String name;
	int age;

	public Person(String name, in age){
		this.name = name;
		this.age = age;
	}
	}

3.setter주입
-setter메서드를 통해 객체를 주입받는다.
--------------------------------------------------------------------------------------------------------------------
스프링이 객체를 어떻게 저장하는가?
@SpringBootApplication 어노테이션에 속해있는 @ComponentScan 어노테이션이 해당 파일 아래
경로에 있는 모든 패키지를 탐색하면서 @Component 어노테이션이 붙어 있는 클래스를 모두 Map 형태로 저장한다.

클래스 이름의 첫글자를 소문자화 해서 key로 저장 ex) Computer - > computer
객체를 value로 만들어서 저장

의존성 주입(Dependency Injection)
객체를 필요로 할 때 스프링이 자동으로 주입을 해준다.

1.필드주입
@Autowired
멤버

2.생성자 주입(99% 이 방법을 사용한다)
멤버

public 생성자(멤버){
	this.멤버 = 멤버
}

3.setter주입

@Getter getter
 메서드 만들어줌

@Setter setter 
메서드 만들어줌

@NoArgsConstructor 
매개변수 없는 기본생성자

@AllArgsConstructor 
모든 멤버를 매개변수로 가지는 생성자 생성

@RequiredArgsConstructor 
final이나 @NotNull필드만 매개변수로 갖는 생성자 생성

@Data 
getter,setter,requiredArgsConstructor,ToString,EqualsAndHashCode를 한번에 정의

@Builder 
빌터패턴을 사용할 수 있게 해주는 어노테이션

ex)
@Builder
public class  User{
	private String id;
	private String name;
	private String email;
}

User user = User.builder().id("1").name("홍길동").email("hong@example.com").build()































