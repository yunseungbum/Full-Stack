복습

1.start-spring.io -> 프로젝트 생성
2.eclipse에 import
3. 스프링의 핵심 개념 IoC,DI

객체를 우리가 만드는게 아님(부트가 알아서 만들어줌) ->IoC

스프링에게 객체를 만들어 달라고 시키는 법
클래스 앞에 컴포넌트 어노테이션을 붙힘
@Component
pubulic class Car{};

@ComponentScan을 통해서 @Component가 붙어있는 클래스를 전부 객체로 만들어서 컨테이너로 저장한다.

의존성 주입
객체가 필요한 곳에 직접 넣는게 아니라
컨테이너에 저장해놓은 객체를 주입을 시키는 것

1.필드주입
주입이 필요한 곳에 @Autpwired -> 편한데 순환참조가 일어날 수 있다.

2.생성자주입(가장 많이 씀)
생성자를 만들고 주입이 필요한 필드를 매개변수로 받아서 주입

3.setter주입(거의 안씀)
setter을 통해서 객체를 주입


@Component
public class Battery{ -> 객체 컨테이너에 battery 객체가 저장됨
	int charge = 90;
}

@Component
public calss Toy{ -> 객체 컨테이너에 toy객체가 저장됨
	@Autowired -> 필드주입
	Battery battery; -> 배터리 객체가 필요함

	public Toy(Battery bettery){
	this.battery = battery;
}

toy.battery -> null;  -> 기존자바에서는 이렇게 나옴

필드 주입 후 결과
toy.battery -> 90;

@Component
public calss Toy{ -> 객체 컨테이너에 toy객체가 저장됨

	Battery battery; -> 배터리 객체가 필요함

	public Toy(Battery bettery){
	this.battery = battery;
}
}

생성자 주입 후 결과
toy.battery -> 90;


Gradle
자동화 빌드툴
플러그인
의존성
라이브러리 설치 -> 어떤 버전의 어떤 라이브러리를 설치하겠다.
->Gradle이 저장소로 가서 설치를 해준다.
프로젝트의 버전관리

Lombok
어노테이션으로 코딩에 필요한 코드를 대신 만들어준다.
@Getter -> getter메서드 만들어줌
@Setter -> setter메서드 만들어줌
@Builder -> 빌더패턴을 사용할 수 있게 해줌
	    장점: 생성자 오버로딩을 줄일 수 있고 객체를 단계적으로 생성할 수 있다. 코드의 가독성을 높힘
@Data -> getter/setter,toString,EqualandHashCode 메서드를 사용가능
@NoArgsConstructor -> 기본 생성자
@AllArgsConstructor -> 모든 필드를 매개변수로 갖는 생성자
@RequiredArgsConstructor ->@NonNull,final로 선언된 필드만 매개변수로 갖는 생성자
@ToString -> toString 오버로딩
-----------------------------------------------------------------------------------------------------------


싱글톤 패턴
:객체를 한번만 만들어 놓고 계속 갖다 쓰겠다.
:스프링에서 Bean으로 만드는 것들은 다 싱클톤으로 만들어진다.
:메모리에 딱 한번만 올라가게 되고 우리는 만들어진 것을 사용한다.

서비스 개발 실습
POST로 요청했을 때 CREATE REST API 개발
GET으로 요청했을 때 RETRIEVE(검색) PEST API 개발
UPDATE로 요청했을 때 UPDATE REST API 개발
DELETE로 요청했을 때 DELETE REST API 개발

영속계층 -> 서비스계층 -> 표현계층 순으로 구현























































































































