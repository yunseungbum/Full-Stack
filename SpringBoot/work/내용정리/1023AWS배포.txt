정규표현식
이메일 형식
주민번호 형식
문자열에서 특정 내용을 찾거나 대체 또는 발췌하는데 사용한다

const regex = /패턴/

let phone = "010-1111-1111"

regex.test(phone)
문자열이 정규표현식과 매칭되면 ture 아니면 false

a-z 소문자 a부터 z까지
A-Z 대문에 A부터 Z까지

a-zA-Z 소문자 a부터 대문자 Z까지

ㄱ-ㅎ가-힣 한글 문자 범위

정규식 검색 기준 패턴
| : or
[ ] : 괄호안의 문자들 중 하나 또는 묶음 [abc] -> "a" 또는 b 또는 c를 포함하는
[다-바]: 다 or 라 or 마 pr 바

[^문자] : 괄호안의 문자를 제외 한 것[^lgen] -> l,g,e,n 문자를 제외한 것

-------------------------------------------------------------------------------------
localhost:3000 -> localhost:5000/todo 토큰이 없으니까 403이 떠야함

스프링 시큐리티가 자기 마음대로 리다이렉트 해버림

우리가 원하는 것
403이 떠서 로그인 화면으로 가야 한다.
로그인 화면에서 이메일로 로그인 할지 소셜 로그인 할지 고를 수 있도록 해야한다.
 

.exceptionHandling()
: 시큐리티에서 발생하는 예외상황, 예를 들어 인증되지 않은 사용자가 자원에 접근하려고 할 때
 어떤 동작을 할지 정의할 수 있다.

.authenticationEntryPoint(new Http403ForbiddenEntryPoint());
: 인증이 필요한 자원에 대해 인증되지 않은 사용자가 접근할 때 403응답을 반환하도록 설정하는 것

.authorizationEndpoint()
OAuth2 인증의 흐름에서 권한 부여 엔드포인트를 설정하기 위한것이다.
OAuth2에서 클라이언트 애플리케이션 사용자를 대신해 권한을 요청할 때 사용되는 
엔드포인트가 권한 부여 엔드포인드이다.
사용자는 이 엔드포인트로 리다이렉션되어 권한을 승인하는 과정을 거친다.

.baseUri("/auth/authorize")
OAuth2 권한 부여 요청을 처리하는 엔드포인트의 기본 URI를 설정하는 것이다.
즉, 어플리케이션은 사용자가 로그인을 시도할 때 이 엔드포인트를 통해 OAuth2권한 요청을 수행한다.













































































