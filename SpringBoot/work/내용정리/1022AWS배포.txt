http 연결 -> 평문으로 데이터를 보냄
-> 80번 포트,뒤에 포트를 따로 붙히지 않으면 자동으로 80번으로 할당
https 연결 -> 암호화를 해서 보낸다 
-> 443번 포트,뒤에 포트를 따로 붙히지 않으면 자동으로 443번으로 할당
-> SSL,TSL과 같은 인증서를 필요로 한다.


리다이렉트 개념
-사용자가 직접 로그인 페이지 요청
-사용자가 로그인을 안하고 메인 페이지에 접근
-> 권한이 없기 때문에 우리가 로그인페이지로 강제로 보냄
-> 유저가 요청을 한것처럼 페이지를 리다이렉트

application-dev.yml
spring: #스프링부트 설정을 위한 최상위 키워드
  security: #스프링 시큐리티 설정
    oauth2: #OAuth2 인증관련 설정
      client: #OAuth2 클라이언트 설정
        registration: #OAuth2 클라이언트 등록 설정
          github: #Github OAuth2 클라이언트 설정(이름을 github로 정의 구글이면 google, 페이스북이면 facebook)
            clientId: Ov23liQ1HKLlw7zbRqkw #Github OAuth2 앱의 클라이언트 ID(Github에서 발급받은 값)
            clientSecret: c4aefee2c8e1706cf40b3ef0ea5505e1d8f22ccf #Github OAuth2 앱의 클라이언트 시크릿
            redirectUri: "{baseUrl}/oauth2/callback/{registrationId}" #OAuth2 인증 후 리다이렉션 되는 URL,{baseeUrl}은 애플리케이션의 기본 URL,{registrationId}는 클라이언트 등록 ID
            scope: #Github API를 사용할 때 요청할 권한의 범위
              - user:email # 사용자의 이메일 정보를 요청하는 범위
              - read:user #사용자의 기본 프로필 정보를 읽는 범위
    provider: #OAuth 2제공자 설정
      github: #Github OAuth2 제공자 관련 설정
        authorization-uri: https://github.com/login/oauth/authorize
		#사용자를 Github 로그인 페이지로 리다이렉션 하는 URI,Github OAuth2 인증의 시작점


















































