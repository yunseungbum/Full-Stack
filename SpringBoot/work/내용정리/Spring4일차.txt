복습
1.IoC:제어 역전
@Conponent, @Service @RestController @Repository 어노테이션이 붙은 클래스를 스프링부트가 애플리케이션이 실행될 때 먼저
Bean으로 만들어서 객체 컨테이너에 singleton방식을 저장해놓는다.

List에 저장해야 하는  Entity -> 싱글톤 패턴으로 만들면 안됨

2.DI(Dependency Injection) : 의존성 주입
자바에서는 클래스에 속해있는 메서드를 사용하기 위해서 객체를 직접 생성했었다.
부트에서는 만들어진 Bean을 가져다가 사용하는 형태

레이어드 아키텍쳐
프로젝트를 레이어를 구성해서 만든것

표현계층
클라이언트의 요청과 맞닿는 부분이다.
ooController라고 이름을 짓는 경우가 많다.


서비스계층
비즈니스 로직을 설계하는 계층
ooService

영속계층
DB와 맞닿는 부분
ooRepository
 
-------------------------------------------------------------------------------------------------------------------------------
로그
:소프트웨어 시스템이나 애플리케이션에서 동작 상태나 이벤트가 발생했을 때, 그 내용을 기록한 정보다.

로그의 주요 목적
1. 디버깅
: 애플리케이션에서 발생한 문제나 버그를 추적하고 원인을 파악하기 위해 사용된다.
: 디버깅 시 로그를 통해 애플리케이션이 어떤 작업을 하고 있었는지, 어떤 오류가 발생했는지를 알 수 있다.

2.모니터링
: 애플리케이션이 예상대로 작동하는지 확인하고, 시스템 성능을 모니터링하기 위해 사용된다.
: 예를 들어, 응답 속도, 메모리 사용량 등을 로그로 기록하여 애플리케이션의 성능을 분석할 수 있다.

3.문제 해결
: 애플리케이션에서 예상치 못한 상황이 발생했을 때, 로그를 통해 그 문제를 해결하는 데 필요한 정보를 얻을 수 있다.
: 특히, 시스템이 갑작스럽게 중단되거나 성능 저하가 발생했을 때, 그 원인을 파악하는 데 중요한 역할을 한다.

4.보안 감사
: 애플리케이션에 대한 보안 감사 및 추적을 위해 사용된다.
:시스템에 대한 접근 시도나 비정상적인 활동을 로그로 기록하여, 보안 위협을 감지하고 대응할 수 있다.

Slf4j(Simple Logging Facade for Java)





객체 지향 설계 5대 원칙
1. SRP (Single Responsibility Principle) - 단일 책임 원칙
클래스는 하나의 책임만 가져야 하며, 그 책임을 완전히 캡슐화해야 합니다.
즉, 클래스가 변경되어야 하는 이유는 단 하나여야 합니다.

2. OCP (Open/Closed Principle) - 개방-폐쇄 원칙
소프트웨어 개체(클래스, 모듈 등)는 확장에 대해서는 열려 있어야 하고, 수정에 대해서는 닫혀 있어야 합니다.
새로운 기능을 추가할 때 기존 코드를 수정하지 않고도 가능해야 합니다.

3. LSP (Liskov Substitution Principle) - 리스코프 치환 원칙
자식 클래스는 부모 클래스를 대체할 수 있어야 하며, 부모 클래스의 기능을 손상시키지 않아야 합니다.
즉, 자식 클래스는 부모 클래스의 인터페이스를 그대로 따르며, 부모 클래스의 객체를 자식 클래스로 대체할 수 있어야 합니다.

4. ISP (Interface Segregation Principle) - 인터페이스 분리 원칙
클라이언트는 자신이 사용하지 않는 인터페이스에 의존하지 않아야 합니다.
즉, 여러 개의 작은 인터페이스로 나누어 클라이언트가 필요한 인터페이스만 구현하도록 하는 것이 좋습니다.

5. DIP (Dependency Inversion Principle) - 의존성 역전 원칙
고수준 모듈은 저수준 모듈에 의존해서는 안 되며, 둘 다 추상화에 의존해야 합니다.
즉, 구체적인 클래스가 아니라 인터페이스나 추상 클래스를 통해 의존성을 관리해야 합니다.






















































































































