--사원테이블에서 직종, 평균급여를 출력하되
--평균급여가 Bruce보다 큰 경우만 조회

SELECT JOB_ID,AVG(SALARY)
FROM EMPLOYEES
GROUP BY JOB_ID 
HAVING AVG(SALARY) > 
(SELECT SALARY 
 FROM EMPLOYEES 
 WHERE FIRST_NAME = 'Bruce');
 
--사원테이블에서 성에 'Bat'을 포함하는 사원과 같은 부서에서
--근무하는 사원들의 부서번호,이름을 출력
SELECT DEPARTMENT_ID,FIRST_NAME 
FROM EMPLOYEES 
WHERE DEPARTMENT_ID = ( SELECT DEPARTMENT_ID 
						FROM EMPLOYEES
						WHERE LAST_NAME LIKE '%Bat%');
						
--사원 테이블에서 100번 부서의 최소 급여보다 많이 받는 
--다른 부서의 부서번호,최소급여를 조회하세요
SELECT DEPARTMENT_ID,MIN(SALARY)
FROM EMPLOYEES 
GROUP BY DEPARTMENT_ID 
HAVING MIN(SALARY) > (SELECT MIN(SALARY) 
					 FROM EMPLOYEES
					 WHERE DEPARTMENT_ID = 100);
					 
SELECT * FROM PLAYER;

--PLAYER 테이블에서 TEAM_ID가 'K01'인 선수 중 POSITION이 'GK'인 선수
SELECT *
FROM (SELECT * FROM PLAYER WHERE TEAM_ID='K01')
WHERE POSITION ='GK';

--PLAYER테이블에서 전체평균키와 포지션별 평균키 구하기
SELECT "POSITION", ROUND(AVG(HEIGHT),1),(SELECT ROUND(AVG(HEIGHT),1) FROM PLAYER) AS "전체평균키"
FROM PLAYER
WHERE "POSITION" IS NOT NULL
GROUP BY "POSITION";

--AUTO COMMIT
--내가 실행하는 쿼리문이 테이블에 바로 반영
--COMMIT이 되면 되돌아가는 것이 불가능하다.


--PLAYER테이블에서 NICKNAME이 NULL인 선수들은
--정태민 선수의 닉네임으로 변경하기
UPDATE PLAYER
SET NICKNAME =(SELECT NICKNAME FROM PLAYER WHERE PLAYER_NAME ='정태민')
WHERE NICKNAME IS NULL;


SELECT NICKNAME FROM PLAYER;

--사원테이블에서 평균급여보다 낮은 사원들의 급여를 10%인상
UPDATE EMPLOYEES
SET SALARY = SALARY*1.1
WHERE SALARY < (SELECT AVG(SALARY) FROM EMPLOYEES); 

SELECT AVG(SALARY) FROM EMPLOYEES;

--PLAYER테이블에서 평균키보다 큰 선수들을 삭제
DELETE FROM PLAYER WHERE HEIGHT > (SELECT AVG(HEIGHT) FROM PLAYER);

SELECT * FROM EMPLOYEES;

--FROM 절에서 쓸 때 : IN LINE VIEW
--SELECT 절에서 사용할 때 : SCALAR
--WHERE 절에서 사용할 때:SUB QUERY

--사원테이블에서 성과 이름 연결하기
 SELECT FIRST_NAME || LAST_NAME 
 FROM EMPLOYEES;

--XX의 급여는 XX다.
SELECT FIRST_NAME ||'의 급여는 '|| SALARY ||'다.'
FROM EMPLOYEES;


SELECT COUNT(SALARY) AS 개수,
		MAX(SALARY) AS 최대값,
		MIN(SALARY) AS 최소값,
		SUM(SALARY) AS 합계,
		AVG(SALARY) AS 평균
		FROM EMPLOYEES e;
	
	--사원테이블에서 EMPLOYEE_ID를 사번,FIRST_NAME을 이름,
	--SALARY를 급여로 별칭을 주고 전체 내용 조회하기
	
	SELECT EMPLOYEE_ID AS 사번,FIRST_NAME AS 이름,SALARY AS 급여 FROM EMPLOYEES;

--두개 이상의 테이블에서 컬럼을 조회할 때,
--어떤 테이블에서 온 컬럼인지 확실하게 적어줘야한다.
SELECT e.DEPARTMENT_ID ,d.DEPARTMENT_ID 
FROM EMPLOYEES e ,DEPARTMENTS d ;

--사원테이블에는 부서명이 없다.
--부서테이블에는 DEPARTMENT_ID컬럼을 PK로 가지고 있다.
--사원테이블에는 DEPARTMENT_ID컬럼을 FK로 가지고 있다.

SELECT E.FIRST_NAME,E.DEPARTMENT_ID,D.DEPARTMENT_NAME
FROM EMPLOYEES E JOIN DEPARTMENTS D 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID;

SELECT * FROM DEPARTMENTS d;
SELECT * FROM EMPLOYEES e;


--부서테이블,지역테이블(LOCATION)로부터 부서명과 도시명(CITY)을 조회하세요
SELECT * FROM LOCATIONS l ;
SELECT d.DEPARTMENT_ID,l.CITY 
FROM DEPARTMENTS d JOIN LOCATIONS l
ON d.LOCATION_ID = L.LOCATION_ID;

--지역테이블과,나라테이블(COUNTRIES)를 조회하여
--도시명과 국가명을 조회하세요
SELECT * FROM COUNTRIES;
SELECT L.CITY ,C.COUNTRY_ID 
FROM LOCATIONS l JOIN COUNTRIES c 
ON L.COUNTRY_ID = C.COUNTRY_ID;

--이름,성,직종,직업명을 조회해주세요
SELECT * FROM JOBS j ;
SELECT e.FIRST_NAME,e.LAST_NAME,e.JOB_ID,j.JOB_TITLE 
FROM EMPLOYEES e JOIN JOBS j ON e.JOB_ID = j.JOB_ID;

--테이블 3개 조인하기
-- 사원,부서,지역테이블로부터 이름,이메일,부서번호,부서명,지역번호,도시명
SELECT E.FIRST_NAME,E.EMAIL,E.DEPARTMENT_ID,D.DEPARTMENT_ID ,L.LOCATION_ID,L.CITY
FROM EMPLOYEES E JOIN DEPARTMENTS D  
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
JOIN LOCATIONS l ON D.LOCATION_ID = L.LOCATION_ID
AND L.CITY ='Seattle';

SELECT * FROM EMP;
SELECT e2.ENAME 직원,e2.MGR 직원,  e1.ENAME 상사, e1.EMPNO
FROM EMP e1 JOIN EMP e2
ON e1.EMPNO = e2.MGR; 


CREATE TABLE 테이블A(
A_id NUMBER,
A_NAME VARCHAR2(10)
);

CREATE TABLE 테이블B(
B_id NUMBER,
B_NAME VARCHAR2(10)
);

INSERT INTO 테이블A values(1, 'John');
INSERT INTO 테이블A values(2, 'Jane');
INSERT INTO 테이블A values(3, 'Bob');

INSERT INTO 테이블B values(101, 'Apple');
INSERT INTO 테이블B values(102, 'Banana');


SELECT * FROM 테이블A CROSS JOIN 테이블B;

--사원테이블과 부서테이블의 LEFT OUTER JOIN을 이용하여 
--사원이 어느 부서에 있는지 조회하기

SELECT FIRST_NAME,DEPARTMENT_NAME
FROM EMPLOYEES E LEFT OUTER JOIN DEPARTMENTS D
ON E.EMPLOYEE_ID  =D.DEPARTMENT_ID ;

--사원테이블과 부서테이블의 RIGET OUTER JOIN을 이용하여
--사원이 어느 부서에 있는지 조회하기
SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM employees e
RIGHT OUTER JOIN departments d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID; 

SELECT e.FIRST_NAME, d.DEPARTMENT_NAME
FROM employees e
FULL OUTER JOIN departments d
ON e.DEPARTMENT_ID = d.DEPARTMENT_ID;


--TEAM테이블과 STADIUM테이블을 통해 홈팀이 있는 구장만 팀이름과 구장이름으로 조회
SELECT * FROM TEAM t ;
SELECT * FROM STADIUM s ;

SELECT T.TEAM_NAME , S.STADIUM_NAME 
FROM STADIUM s LEFT OUTER JOIN TEAM t 
ON S.STADIUM_ID = T.STADIUM_ID; 

--누가 얼마받는지에 대한 조회
SELECT EMPLOYEE_ID ,FIRST_NAME ,SALARY 
FROM EMPLOYEES e ;

SELECT * FROM PLAYER p ;

CREATE OR REPLACE VIEW PLAYER_AGE AS(
SELECT PLAYER_NAME , ROUND((SYSDATE - BIRTH_DATE)/365) AGE
FROM PLAYER p 
);
SELECT * FROM PLAYER_AGE;

--뷰이름: DATA_PLUS
--급여를 많이 받는 순으로 순위와 이름,급여를 조회하는 쿼리 넣기
CREATE OR REPLACE VIEW DATA_PLUS AS(
SELECT RANK() OVER(ORDER BY SALARY DESC) AS "RANK", FIRST_NAME, SALARY 
FROM EMPLOYEES
);

SELECT * FROM DATA_PLUS;

CREATE OR REPLACE VIEW PLAYER_TEAM_NAME AS(
SELECT P.TEAM_ID,T.TEAM_NAME 
FROM PLAYER p,TEAM t
WHERE P.TEAM_ID = T.TEAM_ID
);

SELECT * FROM PLAYER_TEAM_NAME;

--HOMETEAM_ID,STADIUM_NAME,TEAM_NAME을 조회
--홈팀이 없는 경기장도 검색하기
--뷰이름_STADIUM_INFO
CREATE OR REPLACE VIEW STADIUM_INFO AS(
SELECT S.HOMETEAM_ID,S.STADIUM_NAME,T.TEAM_ID 
FROM TEAM t RIGHT OUTER JOIN STADIUM S 
ON T.TEAM_ID  = S.HOMETEAM_ID
); 

SELECT * FROM STADIUM_INFO;

--홈팀이 없는 경기장을 검색하세요
SELECT *
FROM STADIUM_INFO
WHERE HOMETEAM_ID IS NULL;


--EMPLOYEES테이블에서 JOB_ID가'IT_TROG;인 사람의 이름을 자신의 이름으로 바꾸기
UPDATE EMPLOYEES SET
FIRST_NAME ='이현준'
WHERE JOB_ID = 'IT_PROG';

SELECT * FROM EMPLOYEES e ;

--데이터베이스에 영향을 주는 INSERT,UPDATE,DELETE문에서 많이 사용된다.





















