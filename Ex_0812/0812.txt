강제 예외 처리 방법
-프로그램을 작성하다 보면 코드의 오류로 발생하는 예외도 있지만, 
 프로그램의 규칙에 위배되어 예외를 발생해야 하는 경우도 있다
-만약, 프로그램의 규칙에 위배되어 예외를 발생해야 할 경우, 강제로 예외를 발생시킬 수 있다.

사용자 정의 예외처리
-자바가 제공하는 예외 객체 외에도 개발자의 목적에 의해서 예외 객체를 만들 수 있다.
-자바가 제공하는 예외 객체는 다양하지만 모든 예외를 처리하기는 어렵다.
-목적에 따라 공통기능을 지니는 예외 처리도 필요하기 때문에 개발자가 직접 예외를 생성하여 처리해야 한다.


기본 API 클래스
-자바에서 제공하는 API는 프로그램 개발에 자주 사용되는 클래스 및 인터페이스의 모음을 말하며 라이브러리라고도 부릅니다.

java.lang 패키지
-java.lang 패키지는 자바 프로그램의 기본적인 클래스를 담고 있는 패키지다.
-가령 우리가 Scanner를 사용하려 한다면 스캐너를 import해줘야 사용할 수 있다. 
-그러나 System, String등과 같은 클래스는 따로 선언 없이 사용이 가능했다.

Object		자바 클래스의 최상위 클래스로 사용
System		시스템의 표준 입력/출력 장치로부터 데이터를 입력받거나 출력하기 위해 사용
		자바 가상 기계를 종료할 때 사용
String		문자열을 저장하고 여러 가지 정보를 얻을 때 사용
StringBuffer/StringBuilder	문자열을 저장하고 내부 문자열을 조작할 때 사용
Math		수학 함수를 이용할 때 사용

Object클래스
-Object클래스는 자바의 최상위 클래스이다.
-자바에서 생성되는 모든 클래스는 생성될 때 상속을 하지 않아도 Object를 자동으로 상속받게 되어있다.
-따라서 클래스를 생성하면 Object가 가지고 있는 여러 메서드를 그대로 사용하거나 Override하여 사용할 수 있다.

protected Object clone()	객체 자신을 복사한 후 반환
boolean equals(Object obj)	다른 객체와 자신이 가진 실제 값을 비교
int hashCode()			객체의 hashCode 값을 반환
String toString()		객체 자신의 정보를 반환

String클래스
-String클래스는 문자열을 처리하는 객체형 데이터 타입이다.
-일반적으로 기본 데이터 타입들과 마찬가지로 문자열 데이터를 담는 간단한 형식으로 사용하지만
-문자열을 차리하기 위한 다양한 기능들을 가지고 있다.
-String객체는 한 번 생성되면 그 값을 읽기만 하고 변경할 수 없다.

StringBuffer/StringBuilder
-String클래스는 최초 지정된 문자열 이후에 값이 추가되면 내부적으로 새로운 메모리를 할당해 새롭게 문자열을 등록한다.
-문자열을 많이 사용할수록 메모리 사용이 늘어나 메모리가 낭비될 수 있다.
-이런 문제점을 해결하기 위해 가변 속성을 지닌 StringBuffer또는 StringBuilder클래스를 사용한다.
-StringBuffer와 StringBuilder는 내부에 여유 공간을 두기 때문에 문자열을 합칠 때 
 메모리에 새롭게 생성하는 과정을 String보다 현저히 생략할 수 있다.
-StringBuffer와 StringBuilder는 사용하는 기능에서는 차이가 없으나 
 StringBuffer의 경우 뒤에서 배울 스레드 환경에서 안정성 기능을 추가로 가지고 있다.
-스레드 환경이 아닌 경우에는 StringBuilder의 성능이 좋으므로 
 일반적인 프로그래밍에서는 StringBuilder를 사용하는 것을 권장합니다.


append(String str)	기존 문자열 뒤에 더하여 반환
delete(int start, int end)	시작 위치부터 끝 위치 전까지 삭제
insert(int offset, String str)	시작 위치부터 문자열을 삽입
reverse()	문자열을 반대로 출력


































