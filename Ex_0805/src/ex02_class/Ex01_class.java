/*  객체지향프로그래밍(OOP : Object-Oriented Programming)
 *  객체 지향 프로그래밍이란, 말 그대로 객체를 지향하는 프로그래밍 방법을 말한다.
	객체란 우리 실생활에 존재하는 모든것으로 생각할 수 있다.
	객체는 일반적으로 상태를 표현할 수 있고, 우리가 행동으로 실행할 수 있는 모든것들을 의미한다.
	이런 객체를 중심으로 프로그램 구조를 설계하고 프로그래밍 하는 것을 객체 지향 프로그래밍이라고 한다.
 * 
 * 클래스란?
 * 객체를 생성하기 위한 설명서
 * 물건을 만들기 위한 메뉴얼
 * 클래스를 기반으로 객체를 생성한다.
 * 하나의 클래스로 여러개의 객체를 만드는 것이 가능하다.
 * 
 * 클래스의 선언
 * 접근제한자 class 클래스명{     }
 * 
 * 접근제한자: 해당 클래스의 접근 범위를 제한하는 키워드
 * class: class를 선언함을 뜻한다.
 * 클래스명 : 변수처럼 이름을 가지고, 객체를 생성할 때 사용한다.
 * 
 * 클래스의 종류
   1.실행용 클래스
   프로그램 전체에서 단 하나의 클래스로, 프로그램의 실행을 맡고 있다.
   main메서드를 갖고 있으며, 다른 클래스에서 사용하지 않는다.
   
   2.객체 생성용 클래스
   다른 클래스에서 사용할 목적으로 선언되는 클래스.
   
   클래스 이름을 작성하는 규칙
   클래스의 첫글자는 대문자를 사용한다.
   숫자를 사용할 수 있으나 첫글자로는 사용할 수 없다.
   특수문자는 $,_만 가능하다.
   자바 예약어는 사용할 수 없다.
   
 */


package ex02_class;
	
class A{
	
}//class 끝

//프로그램을 실행했을 때, 코드를 컴파일한 결과물은 코드 파일을 각각 작성한 것과
//동일하게 각 class별로 도출되어 2개가 된다.
//파일 분리 여부와 상관없이 결과물이 같기 때문에, 분리 여부는 개발자가 원하는대로 작성해도 무방하다.
//그러나 추후 유지보수의 편리성과 클래스 재사용을 고려해 하나의 파일에 한 개의 클래스를 작성하는 것을 추천한다.

public class Ex01_class {
public static void main(String[] args) {
	//객체변수의 선언
	//객체를 담을 수 있는 변수를 선언
	//클래스명 변수명;
	Cat c;
	
	//만들어진 객체 변수에
	//객체를 만들어 대입하기
	
	c = new Cat();
	//new는 메모리에 객체를 생성하기 위한 공간을 할당 받는 키워드
	
	Cat c2 = new Cat();
	
	//자동차 객체 생성하기
	Car car =new Car();
	
	//변수명.필드명
	//변수명: 클래스를 이용해 만든 객체의 이름
	//필드명: 만든 객체가 가지고 있는 필드의 이름
	
	System.out.println("car의 바퀴수 " + car.wheel);
	
	car.wheel = 4;
	System.out.println("car의 바퀴수 " + car.wheel);
	
	Car car2= new Car();
	System.out.println("car2의 바퀴수 " + car2.wheel);
	
	//메서드의 사용
	//구현된 메서드를 사용하는 방법은 필드의 사용법과 동일하다.
	//메서드를 선언한 클래스 안에서 메서드를 사용할 때는 단순히 
	//호출하면 되지만, 다른 클래스에서 메서드를 사용하려면 객체를 생성한 후
	//첨조 변수를 이용해 그 객체의 메서드를 사용해야 한다.
	//객체가 존재해야 메서드도 존재하기 때문이다.
	
	//변수명.메서드명(); 생성한 객체의 메서드 호출
	car.ride();
	car.ride();
	car.ride();
	
	
	
	
	
	
	
	
	
	
	
	
}//main 끝
}
