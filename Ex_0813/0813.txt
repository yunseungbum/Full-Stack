컬렉션 프레임워크(Collection FrameWork)
-배열은 한번 정한 크기를 변경하거나 삭제할 수 없다.
-또한 별도의 기능이 없기 때문에 직접 index를 이용해 데이터를 저장해야 한다.
-자바는 이러한 불편함을 해결하기 위해 피룡한 자료구조를 미리 구현하여 java.util 패키지에서 제공하고 있다. 이를 '컬렉션 프레임워크'라고 한다.
-컬렉션은 기존에 있던 자료구조 List(리스트), Queue(큐), Tree(트리) 등의 자료구조를 의미한다.
-프레임워크는 클래스와 인터페이스를 묶어 놓은 개념이다.
-즉, 컬렉션 프레임워크란 기존에 존재했던 자료 구조에 인터페이스로 설계된 기능을 클래스를 통해 제공하여 
 데이터 관리에 용이한 자료 구조 객체를 구조화한 것


List	
-순서가 있는 데이터의 집합	
-데이터 중복 허용 O	
-ArrayList,LinkedList

Set	
-순서를 유지하지 않는 데이터의 집합	
-데이터 중복 허용 X	
-HashSet,LinkedHashSet

Map	
-키(Key)와 값(Value)의 쌍으로 이루어진 데이터의 집합	
-순서유지 X, 키 중복 X, 값 중복 O	
-HashMap,LinkedHashMap,Properties


제네릭
-JDK 1.5 이전에는 여러 타입을 사용하는 대부분의 클래스나 메서드에서 반환값으로 Object타입을 사용했다.
-이러한 경우 잘못된 캐스팅으로 인해 런타임 오류가 발생할 가능성이 있다.
-JDK 1.5부터 도입된 제네릭을 사용하면 컴파일할 때 타입이 미리 정해지므로 타입 검사나 변환과 같은 번거로운 작업을 생략할 수 있다.
-클래스나 메서드 내부에 사용될 데이터 타입의 안정성을 높일 수 있다.
-자바에서 제네릭(Generics)은 클래스 내부에서 사용할 데이터 타입을 외부에서 지정하는 기법이다.
-객체별로 다른 타입의 자료가 저장될 수 있도록 한다.


generic 선언 및 생성
-제네릭타입은 타입을 파마미터로 가지는 클래스와 인터페이스를 말한다.
-클래스 또는 인터페이스 이름 뒤에 <>(다이아몬드 연산자) 기호를 추가하고 사이에
 식별자 기호를 지정하여 파라미터화 할 수 있다.
-이것을 마치 메서드가 매개변수를 받아 사용하는 것과 비슷하게 제네릭의 타입 매개변수(parameter)/타입 변수라고 부른다.

public class 클래스명<T>{...}
public interface 인터페이스명<T>{...}

타입 파라미터 기호 네이밍
-제네릭 기호를 와 같이 써서 표현했지만 사실 식별자 기호는 문법적으로 정해진것은 없다.
-다만 우리가 for문을 이용할 때 루프 변수를 i로 지정해서 사용하듯이, 제네릭의 표현변수를 T로 표현한다고 보면 된다. 
 만일 두번째, 세번째 제네릭이 필요하다고 하면 S,U로 이어나간다.
-명명하고 싶은대로 아무 단어나 넣어도 문제는 없지만, 
 대중적으로 통하는 통상적인 네이밍이 있으면 개발이 용이해지기 때문에 암묵적인 규칙(convention)이 존재한다.

	<T>	타입(Type)
	<E>	요소(Element)
	<K>	키(Key)
	<V>	값(Value)
	<N>	숫자(Number)

List컬렉션
-List는 배열과 유사한 자료 구조로 중복이 허용되면서 저장 순서가 유지되는 구조를 제공한다.
-즉 배열처럼 index를 사용해 데이터를 저장하고 찾게 된다.
-배열과는 다르게 크기의 제한이 없으며 삽입,삭제,변경의 기능이 자유롭다.
-데이터의 크기를 특정할 수 없는 다량의 데이터를 저장할 때 용이하게 사용할 수 있는 자료구조이다.


List가 제공하는 주요 메서드
void add(E e)			삽입		데이터를 순차적으로 삽입
void add(int index,E e)		중간 삽입	원하는 index 위치에 삽입
void set(int index,E e)		치환		원하는 index 위치의 값 변경
E get(int index)		반환		선택된 index위치의 값 반환
void remove(int index)		삭제		선택된 index위치의 값 삭제
void clear()			전체삭제	모든 데이터 삭제
int size()			크기		저장된 데이터의 개수 반환
boolean contains(Object o)	검색		데이터 존재 여부 확인


ArrayList
-ArrayList는 가장 많이 사용하는 List인터페이스의 대표적인 구현 클래스이다.
-JDK 1.2부터 제공된 ArrayList는 내부적으로 배열을 이용해 구현되어 배열과의 호환성이 좋은 자료구조이다.

List<데이터 타입> list = new ArrayList<데이터 타입>();

JDK 1.7이후부터는 Collection의 선언이 간소화되었습니다.

List<데이터 타입> list = new ArrayList<>();
우측의 생성자를 통한 선언시 제네릭을 생략할 수 있다.





































