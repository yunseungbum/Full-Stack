클래스의 구성
-클래스를 구성하는 요소는 필드,메서드,생성자 3가지 밖에 없다.

필드(field)
-객체가 가져야할 데이터의 상태를 저장하는 변수를 말한다.
-필드, 전역변수, 멤버 변수 라고 부르는데 다 같은말이다.
-필드의 값을 초기화 하지 않으면 객체 생성시 자동으로 기본값으로 초기화 된다.

메서드
-객체의 기능을 담당하는 중괄호 블록을 말한다.
-특정 기능을 수행하는 코드를 따로 중괄호 안에 작성하며, 1개의 메서드는
 일반적으로 1개의 기능을 수행한다.

메서드의 선언
반환형 메서드명(파라미터) {	기능 작성하기  return 반환값;  } 

상황에 따라서 필요하지 않다면 파라미터와  return값으 없어도 된다.
 
함수의 작동 원리
-메서드를 호출하면 흐름이 선언된 쪽으로 간다.
-내부의 있는 코드들이 순차적으로 실행되고 경우에 따라 실행한 결과를 호출한 곳으로 돌려준다.
- 값을 돌려주는 것으로 '반환한다'라고 표현하고, 반환하는 결과값을 '반환값' 이라고 한다.
- 반환값이 없는 경우 void를 사용한다.
- 반환값이 있는 경우 반환하는 데이터의 타입을 반환형에 명시해야 한다.
- int, String, boolean등 기본자료형을 포함하여 사용자가 만든 객체로도 반환이 가능.
- 아무것도 반환하지 않을 때는 void

메서드 이름 짓기
-기능을 명확하게 설명해줄 수 있는 이름이 좋다.
-메서드명을 작성하는 규칙은 변후를 작성하는 규칙과 동일하다.

생성자(constructor)
-객체를 생성할 때 반드시 호출해야 하는 특수한 기능을 가진 메서드
-이 메서드는 객체를 생성하면서 객체 변수를 초기화 하는 역할을 하기 때문에 생성자라고 부른다.

클래스명 객체명 = new 클래스명();

생성자를 한번도 정의한 적이 없음에도 불구하고 호출해서 객체를 생성해왔다.
-이게 가능한 이유는 우리가 직접 선언하지 않아도 '기본 생성자'가 자동으로 생성되고
 우리 눈에만 보이지 않기 때문이다.

생성자를 통해 객체 변수를 초기화 한다는 말은, 단순히 어떤 값을 초기화 한다는 뜻이 아니다.
필드와 메서드를 호출하는 등 객체를 사용학 위해서는 객체 변수가 메모리에 올라가야 하는데, 
이렇게 메모리에 객체를 올려주는 역할을 하기 때문이다.

정적멤버와 static
-클래스 안에서 선언된 필드와 메서드를 멤버라고 부른다
-객체들이 각각 같기 때문에 멤버라고 부른다.

메서드 사용의 이점
-메서드를 구현함으로써, 같은 내용의 코드를 반복적으로 사용하는 것을 피할 수 있다.
-반복되는 문장들을 묶어서 메서드로 작성해놓으면 필요할 때마다 재사용이 가능하기 때문이다.
-코드의 집합을 따로 분리하는것을 "모듈화"라고 한다.
-모듈화를 하면 코드를 읽을 때 가독성이 좋아지며, 프로그램을 수정할 때 더욱 빠르고 쉽게 할 수 있다.

메서드 선언
-메서드는 크게 선언부(signature)와 실제 영역(body)로 구성되어 있다.

접근 제한자 반환타입 메서드명(){
	기능을 수행하는 코드 }

접근제한자
-클래스/메서드/필드에 대한 접근을 어느범위까지 제한하느냐에 대한 키워드
public : 모든 접근을 허용. 같은 프로젝트 내의 모든 객체들이 사용할 수 있도록 허용.
private : 현재 클래스 내에서만 사용을 허가.
protected : 상속관계의 객체들에만 사용을 허가.
default : 같은 패키지(폴더)내의 객체에만 사용을 허가(아무것도 쓰지 않으면 default)


반환타입(return Type)
-메서드를 호출하면 메서드는 블록 안에 있는 코드들을 실행한 후 결과값을 반환한다.
-이때 결과값을 어떤타입으로 반환할것인지 미리 정해주는것이다.
-반환값이 없는 경우 타입으로 'void'를 쓰면 된다.

메서드명(함수명)
-메서드명은 말 그대로 메서드의 이름(첫글자는 소문자로 시작한다.)
-메서드를 호출 할 때 사용한다.0

매개변수(파라미터)
-특정 기능을 수행하기 위한 메서드는 기능을 수행할 때 필요한 값을 전달받을 수 있다.
-매개변수는 사용할 값을 반듣 변수이다.

접근제한자 반환형 메서드명(자료형변수명(여러개 일 수도 있음)){   //기능을 수행할 코드   }


return
-함수에서 모든 작업을 마치고 경우에 따라 실행한 결과를 호출한곳으로 다시 돌려주기도 한다.
-이것을 '반환한다'라고 표현한다
-반환하는 결과값을 '반환값'이라고 부르기도 한다.
-리턴값이 있을 경우에는 리턴할 데이터의 타입이 무엇인지 반환형에 기재해줘야 한다.
-리턴값이 없는 경우 메서드를 종료하기 위해 return을 사용할 수 있다.
	
-매개변수와 마찬가지로 리턴값의 자료형은 제한이 없다.
-자바에서 사용하는 모든 자료형을 반환타입으로 사용할 수 있다.


























