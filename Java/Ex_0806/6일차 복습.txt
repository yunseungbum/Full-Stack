메서드(함수): 자주사용하는 기능을 묶어 놓은 것
접근제한자 반환형 메서드 ( 매개변수  ) {	코드	  return 반환값;	}
매개변수에는 선언(자료형 변수명)이 필요
반환할 값이 있으면 반환형과 타입 일치 시켜야함 
반환할 값이 없으면 void 선언

getter , setter
setter: 필드의 값을 검증하고 세팅
필드는 밖에서 접근하지 못하게 private으로 지정
ex) void setAge(int age){ this.age=age }
여기서 this는 객체 자신  

getter: 필드에 셋팅도니 값을 반환
ex) getAge(){ 	return age;

	생성자				메서드
	클래스명(대문자로 시작)		메서드명(자유롭게)
	호출(객체 생성시)			호출(여러번 가능)
	반환값(없)			반환값(있,없) 
	반환형 자체가 없음			반환값에 따라 결정,void(없을시)

생성자를 통해서 필드를 초기화 하면 생성되는 객체마다 값을 다르게 넣어 줄 수 있다.



오버로딩
-같은 이름의 메서드(생성자)를 중복해서 정하는 것
1.메서드명(생성자명)이 같아야한다.
2.매개변수의 개수가 달라야 한다.
3.매개변수의 개수가 같을 때 자료형이 달라야 한다.

상속
부모클래스 -> 상속해주는 클래스
부모의 멤버,메서드를 상속을 해준다.

자식클래스 -> 상속 받는 클래스
다시 정의하지 않고 부모의 것을 사용할 수 있다.

부모클래스
class Parent{  			}

자식클래스
class Child extends Parent{		}

오버라이딩
-부모에 정의된 메서드를 자식의 상황에 맞게 재정의

1.메서드명,반환형,매개변수 모두 같아야 한다.
2.내용만 달라야 한다.
3.접근제한자는 부모의 메서드보다 좁은범위는 가능하다.















