자바의 특징

객체지향 언어
하나의 기능을 객체로 만들고, 객체들을 결합하여 하나의 프로그램으로 완성하는 기법을 가지고 있다.

단순성
C/C++을 기반으로 개발되었지만, C에서 제공하는 포인터 등 혼란을 일으킬 수 있는 불필요한 문법들이 제거됐다.

이식성
한번만 작성해놓으면 운영체제의 종류와 상관없이 실행 할 수 있다.

풍부한 오픈소스 라이브러리
무료로 제공하는 라이브러리가 많이 개발되어 있어 프로그램 개발 기간을 단축할 수 있으며 안정성이 높은 프로그램을 개발 할 수 있다.

메모리 자동 정리
자바는 자동으로 가바지 컬렉터가 사용하지 않는 메모리를 주기적으로 수거하고 관리한다.

통합개발환경(IDE)
코딩,디버깅,컴파일,배포 등 프로그램 개발에 관련된 모든 작업을 하나의 프로그램 안에서 처리하는 소프트웨어 환경

이클립스(Eclipse):Java,C,C++등
Visual Studio:C,C++,C#
Intellij:Java,Python 등등

자바 프로그램의 최소 단위 파일 > 클래스
클래스 이름 지을 때 첫 글자는 무조건 대문자로 만들기

디버깅(오류 수정하기)
프로그래밍 도중에 오류가 발생하면 소스 코드 아래 빨간 밑줄이 나타난다. 빨간 밑줄이 표시된 부분에 마우스를 가져다대면 오류의 원인을 확인 할 수 있다.

자바 바이트코드
코드의 명령어 크기가 1바이트이기 때문에 자바 바이트코드라고 불린다. 1과 0으로 이루어져있다.
확장자는 .class이다. JVM만 설치 되어 있으면 어떤 운영체제에서라도 실행될 수 있다.

컴파일
개발자가 작성한 자바코드를 바이트코드로 바꾸는 일련의 과정

자바 컴파일러
자바파일을 바이트코드파일로 바꿔주는 일종의 번역가

------------------------------------------------------------------------------------------------
자바 프로그램의 기본구조

클래스
-자바에서 프로그램을 개발하는 최소 단위
-하나의 파일에 최소 하나 이상의 클래스가 있어야 하며,
소스파일의 이름이 클래스의 이름과 동일해야 한다.

메서드
- 수행할 작업을 나열한 코드의 모음
- 자바 프로그램의 시작 위치인 main()메서드를 포함하는 클래스가 반드시 있어야한다.

실행문
- 작업을 지시하는 것으로 변수나 상수의 선언, 값의 저장, 메서드 호출 등 다양한 명령어와 연산자로 구성된다.

------------------------------------------------------------------------------------------------
주석
프로그램의 소스코드에 개발자의 의견이나 설명을 적는 것
프로그램 소스에 삽입하더라도 프로그램의 수행에 전혀 영향을 끼치지 않는다.
컴파일러가 컴파일 할 시 인식하지 못하는 코드이기 때문이다.
주석으로 코드를 잘 설명해놓으면 오류를 찾거나 복잡한 코드를 이해하기 쉽고, 다른 개발자가 코드를 해석하는데 도움이 된다.

주석의 종류
행주석(//) : //부터 오른쪽으로 그 줄의 끝까지 주석으로 처리

범위주석(/* 내용 */): /*와 */ 사이의 내용을 모두 주석으로 처리

프로그램의 구성
- 데이터와 명령어로만 구성이 되어있다.

데이터
- 실제적인 값
- 숫자,문자와 같은 단순한 데이터부터 사진,영산등 복합적인 데이터가 있다.
- 데이터는 언제든지 수정할 수 있어야 하며, 사용목적에 따라 다른형태로 가공 할 수 있어야 한다.
- 이러한 형태의 데이터는 컴픁처의 메모리에 저장된다.

데이터의 출력
System.out.print(): 괄호안의 내용을 출력한다.
System.out.println(): 괄호안의 내용을 출력하고 줄을 바꿔준다.
System.out.printf():괄호안의 내용을 서식에 맞게 출력
------------------------------------------------------------------------------------------------------------------------------------
자료형
- 자바가 처리할 수 있는 데이터의 종류

기본자료형
자료형		키워드		크기		표현범위
논리형		boolean		1bit		true,false
문자형		char		2byte		0
정수형		byte		1byte		-128 ~ 127
		short		2byte		-32.768 ~ 32,767
		int		4byte		-21억 ~ 21억
		long 		8byte		-900경 ~ 900경
실수형		float		4byte		0.0
		double		8byte		0.0

주의점
- 정수의 경주 해당 자료형이 표현 할 수 있는 범위를 벗어난 데이터를 저장하면, 오버플로우(overflow)가 발생해 전혀 다른 값이 저장될 수 있다.

오버플로우/언더플로우
- 오버플로우는 해당 자료형이 표현 할 수 있는 최대 범위보다 큰 수를 저장할 때 발생하는 현상
- 언더플로우는 해당 자료형이 표현 할 수 있는 최소 범위보다 작은 수를 저장할 때 발생하는 현상						


참조자료형
- 메모리 상에 데이터가 저장된 "주소"를 저장하기 위한 공간으로, 대표적으로 문자열을 저장하는 String이 있다.
- 참조자료형은 개발자가 직접 만들어 추가할 수 있기 때문에 개수가 정해져 있지는 않다.

프로그램을 실행 할 때 필요한 메모리는 크게  Stack과 Heap으로 나뉘어있다.
기본자료형은 Stack공간에 자리를 할당받고 데이터를 저장한다.
참조자료형은 Heap공간에 데이터를 저장하고 주소를 Stack에 저장한다.
주소를 참조하여 저장한다고 참조자료형이라고 한다.

변수
컴퓨터는 프로그램을 실행하는데 필요한 것들을 미리 올려놓고 사용하는 메모리라는 저장 공간이 있다.

개발자는 프로그램을 만들고 실행하는데 필요한 값들을 메모리에 저장해주고, 필요할 때마다 꺼내서 사용한다.

저장하고자 하는 값을 무질서하게 저장하는 것이 아닌, 메모리의 규칙 속에서 일부 공간을 할당받아야 한다.

메모리에 값을 저장하기 위해 할당해놓은 특정 공간을 "변수"라고 한다.




