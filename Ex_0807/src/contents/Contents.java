/* 접근제한자
 * -제한자
 * 클래스,변수,또는 메서드의 선언부와 함께 사용해 부가적인 의미를 부여하는 키워드
 * 경우에 따라 여러 개를 조합하여 사용 할 수 있지만, 접근 제한자의 경우 하나만 선택해서 사용해야 한다.
 * 
 * -접근제한자
 * 클래스,멤버(필드,메서드 포함)에 접근 가능한 범위를 제한하는 키워드
 * 객체지향 프로그래밍의 특징 중 한가자인 정보 은닉을 지키기 위한 중요한 부분이다.
 * 
 *  - public : 제한 없이 모든 패키지, 모든 클래스에서 접근 가능하다.
	- protected : 같은 패키지 안에서 접근 가능하며, 다른 패키지라도 자식클래스라면 접근이 가능하다.
	- default : 같은 패키지 내에서만 접근이 가능하다.
	- private : 같은 클래스 내에서만 접근 가능하다.
	
	클래스의 접근제한자
	-클래스는 접근제한자로 public과 defult만 가질 수 있다.
	-private와 protected 경우, 클래스 멤버들을 위한 접근제한자로 클래스 외부에서 접근을
	 막을지 말지에 대해 제한하는 용도로 사용되기 때문에 클래스의 접근제한자로 사용할 수 없다.
 * 
 * 객체지향의 특징
 *  캡슐화(getter & setter)
 * -객체 내부의 멤버(필드,메서드 등)를 객체 외부에서 볼 수 없도록 한다.
 * -집근이 필요한 경우 public 메서드를 활용해 접근하고, 이외의 값들은 모두 캡슐화를 통해 정보를 은닉
 * 
 *  상속
 * -미리 정의된 부모 클래스의 멤버를 자식 클래스가 물려 받는다.
 * 
 *  다형성
 * -하나의 방법으로 여러 객체를 호출하여 사용할 수 있다.
 * 
 * 
 * 	추상화
 * -공통된 기능과 정보를 추출해 객체화 한다.
 * 
 *  default
 * -접근제한자를 따로 명시하지 않는다면 클래스와 멤버들은 자동으로 default를 가진다.
 * -default로 선언된 클래스와 멤버들은 같은 패키지 안에서는 어디든지 접근 및 사용이 가능하지만
 *  다른 패키지에서는 접근이 불가능하다.
 *  
 *  protected
 * -default처럼 같은 패키지 안에서 접근과 사용을 허가하지만, 다른 패키지에서의 접근을 완전히 제한하는 것이 아닌 
 *  "해당 클래스와 상속 관계에 있는 자식 클래스"라면 다른 패키지라도 접근 및 사용이 가능하다.
 *  
 *  private
 * -가장 사용 범위가 좁은 클래스 멤버를 위한 제한자이다.
 * -클래스가 public/default이더라도, private로 선언된 멤버들은 클래스 외부에서 접근이 불가능하다.
   -오직 선언된 클래스 내부에서만 접근하여 사용할 수 있다.
   -따라서 private멤버는 public인터페이스를 직접 구현하지 않고, 클래스 내부의 세부적인 동작을 구현하는 데 사용된다. 
   
   N차 상속
   상속을 그 다음세대에도 넘길 수 있다.
   2차,3차...N차까지 원하는 만큼 상속을 이어 받을 수 있다.
   
   자바 상속의 특징
   내가 원하는 만큼 상속이 가능하다
   다중상속은 불가능하다
   한개의 부모클래스는 여러개의 자식클래스를 갖는 것은 가능하다
   모든 클래스는 Object클래스를 상속받는다.
   
   Object는 자바의 최상위 클래스이다.
   
   final
   -final 키워드는 상수를 뜻하는 키워드로 필드 앞에 선언하여 사용한다.
   -초기화 후 값을 바꿀 수 없으면 시간이 지나도 처음 정의된 상태가 변하지 않는다는 의미를 가지고 있다
    이 키워드는 메서드와 클래스에도 사용할 수 있다.
   
   final 클래스
   -클래스 앞에 final을 추가할 경우, 이클래스는 상속의 마지막 클래스임을 뜻한다.
   -어떠한 클래스도 이 클래스에 자식 클래스가 될 수 없고
    자연스럽게 이 클래스는 어떠한 클래스의 부모클래스도 될 수 없다.
    
    final메서드
    -메서드 앞에 final을 추가하게 되면 상속은 받더라도,오버라이딩을 할 수 없는 메서드가 된다.
    -즉, 자식 클래스이더라도 부모 클래스에 final로 선언된 메서드는 자식 클래스에서 오버라이딩 하지 못하고 있는 그대로 사용해야 한다.
   
   생성자에는 final을 붙힐 수 없다.
   -생성자는 접근제한자만 추가 할 수 있다.
   -따라서 클래스를 final로 선언하더라도 생성자를 final로 선언할 수 없다.
   --------------------------------------------------------------------------------------------
  
   클래스에서의 타입변환
   -타입변환은 타입을 다른 타입으로 변환하는 것
   -자바에서는 다음과 같이 두 가지 타입 변환이이 있다.
   		-자료형 변환
   		-클래스의 객체 타입 변환
   -클래스의 타입변환도 마찬가지로 자동 타입변환과 강제 타입변환이 있다.
   -단,자료형애 비해 타입 변환이 가능한 범위가 상당히 좁다.
   -클래스의 타입 변환은, 서로 상속 관계에 있는 클래스 사이에서만 변환할 수 있다.
   
   클래스의 자동타입 변환
   -자료형에서의 자동 형 변환과 마찬가지로 개발자가 직접 명시하지 않아도 자동으로 타입 변환이 일어나는 것을 
    '클래스 자동 타입 변환'이라고 한다.
   -클래스 자동 타입 변환은 상속 관계에 있는 자식 클래스의 객체를 부모 타입의 객체로 변환하는 것을 말한다.
   
   부모클래스명 변수명 = new 자식클래스명();
   
   이미 만들어진 자식 객체를 부모 타입으로 변환하려고 할 때는 다음과 같이 구현한다.
   부모 클래스명 객체명 = 자식객체변수명;
   
   
   기본 자료형끼리 비교를 할 때 == 연산자는 값이 같은지 비교하지만 
   객체끼리 비교를 할 때 == 연산자는 주소값이 같은지 비교한다.
   
   동적바인딩의 작동
   1.클래스 계층구조
   -자바에서 동적바인딩은 클래스 계층 구조에서 발생한다.
   -상속하거나 인터페이스를 구현함으로써 계층을 갖는다.
   -이 계층에서 메서드 오버라이딩이 가능하기 때문이다.
   
   2.메서드 오버라이딩
   -자식 클래스는 부모 클래스의 메서드를 재정의(오버라이딩)할 수 있다.
   -이 때, 자식 클래스에서 부모 클래스의 동일한 이름과 시그니처(함수명,매개변수 개수, 매개변수의 자료형)를 가진 메서드를 재정의한다.

   3.실행시 동적 바인딩
   -객체가 생성되고 메서드가 호출될 때, 실제로 실행될 메서드는 객체의 실제 타입에 따라 결정된다.
   -메서드 호출시 객체의 클래스 타입을 기반으로 어떤 메서드를 호출할지 동적으로 결정된다.
   	*/
  




